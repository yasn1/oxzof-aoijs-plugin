{"version":3,"file":"jsonrepair.js","names":["_JSONRepairError","require","_stringUtils","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepair","text","i","output","processed","parseValue","throwUnexpectedEnd","processedComma","parseCharacter","codeComma","parseWhitespaceAndSkipComments","isStartOfValue","endsWithCommaOrNewline","insertBeforeLastWhitespace","parseNewlineDelimitedJSON","stripLastOccurrence","charCodeAt","codeClosingBrace","codeClosingBracket","length","throwUnexpectedCharacter","parseObject","parseArray","parseString","parseNumber","parseKeywords","parseUnquotedString","parseRegex","skipNewline","arguments","undefined","start","changed","parseWhitespace","parseComment","_isWhiteSpace","isWhitespace","isWhitespaceExceptNewline","whitespace","c","isSpecialWhitespace","codeSlash","codeAsterisk","atEndOfBlockComment","codeNewline","code","skipCharacter","skipEscapeCharacter","codeBackslash","skipEllipsis","codeDot","codeOpeningBrace","initial","processedKey","codeOpeningBracket","throwObjectKeyExpected","processedColon","codeColon","truncatedText","throwColonExpected","processedValue","concat","stopAtDelimiter","stopAtIndex","skipEscapeChars","isQuote","isEndQuote","isDoubleQuote","isSingleQuote","isSingleQuoteLike","isDoubleQuoteLike","iBefore","oBefore","str","iPrev","prevNonWhitespaceIndex","isDelimiter","charAt","substring","iQuote","oQuote","isDigit","parseConcatenatedString","iPrevChar","prevChar","isUnquotedStringDelimiter","regexUrlStart","test","regexUrlChar","char","escapeChar","slice","j","isHex","throwInvalidUnicodeCharacter","codeDoubleQuote","isControlCharacter","isValidStringCharacter","throwInvalidCharacter","codePlus","parsedStr","removeAtIndex","codeMinus","atEndOfNumber","repairNumberEndingWithNumericSymbol","codeLowercaseE","codeUppercaseE","num","hasInvalidLeadingZero","parseKeyword","name","value","isKey","regexFunctionNameCharStart","regexFunctionNameChar","codeCloseParenthesis","codeSemicolon","symbol","JSON","stringify","prev","JSONRepairError","chars"],"sources":["../../../src/regular/jsonrepair.ts"],"sourcesContent":["import { JSONRepairError } from '../utils/JSONRepairError.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  endsWithCommaOrNewline,\n  insertBeforeLastWhitespace,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isUnquotedStringDelimiter,\n  isValidStringCharacter,\n  isWhitespace,\n  isWhitespaceExceptNewline,\n  regexFunctionNameChar,\n  regexFunctionNameCharStart,\n  regexUrlChar,\n  regexUrlStart,\n  removeAtIndex,\n  stripLastOccurrence\n} from '../utils/stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\n/**\n * Repair a string containing an invalid JSON document.\n * For example changes JavaScript notation into JSON notation.\n *\n * Example:\n *\n *     try {\n *       const json = \"{name: 'John'}\"\n *       const repaired = jsonrepair(json)\n *       console.log(repaired)\n *       // '{\"name\": \"John\"}'\n *     } catch (err) {\n *       console.error(err)\n *     }\n *\n */\nexport function jsonrepair(text: string): string {\n  let i = 0 // current index in text\n  let output = '' // generated output\n\n  const processed = parseValue()\n  if (!processed) {\n    throwUnexpectedEnd()\n  }\n\n  const processedComma = parseCharacter(codeComma)\n  if (processedComma) {\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (isStartOfValue(text[i]) && endsWithCommaOrNewline(output)) {\n    // start of a new value after end of the root level object: looks like\n    // newline delimited JSON -> turn into a root level array\n    if (!processedComma) {\n      // repair missing comma\n      output = insertBeforeLastWhitespace(output, ',')\n    }\n\n    parseNewlineDelimitedJSON()\n  } else if (processedComma) {\n    // repair: remove trailing comma\n    output = stripLastOccurrence(output, ',')\n  }\n\n  // repair redundant end quotes\n  while (text.charCodeAt(i) === codeClosingBrace || text.charCodeAt(i) === codeClosingBracket) {\n    i++\n    parseWhitespaceAndSkipComments()\n  }\n\n  if (i >= text.length) {\n    // reached the end of the document properly\n    return output\n  }\n\n  throwUnexpectedCharacter()\n\n  function parseValue(): boolean {\n    parseWhitespaceAndSkipComments()\n    const processed =\n      parseObject() ||\n      parseArray() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseUnquotedString(false) ||\n      parseRegex()\n    parseWhitespaceAndSkipComments()\n\n    return processed\n  }\n\n  function parseWhitespaceAndSkipComments(skipNewline = true): boolean {\n    const start = i\n\n    let changed = parseWhitespace(skipNewline)\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace(skipNewline)\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(skipNewline: boolean): boolean {\n    const _isWhiteSpace = skipNewline ? isWhitespace : isWhitespaceExceptNewline\n    let whitespace = ''\n\n    while (true) {\n      const c = text.charCodeAt(i)\n      if (_isWhiteSpace(c)) {\n        whitespace += text[i]\n        i++\n      } else if (isSpecialWhitespace(c)) {\n        // repair special whitespace\n        whitespace += ' '\n        i++\n      } else {\n        break\n      }\n    }\n\n    if (whitespace.length > 0) {\n      output += whitespace\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (i < text.length && !atEndOfBlockComment(text, i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (text.charCodeAt(i) === codeSlash && text.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (i < text.length && text.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      output += text[i]\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (text.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Skip ellipsis like \"[1,2,3,...]\" or \"[1,2,3,...,9]\" or \"[...,7,8,9]\"\n   * or a similar construct in objects.\n   */\n  function skipEllipsis(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    if (\n      text.charCodeAt(i) === codeDot &&\n      text.charCodeAt(i + 1) === codeDot &&\n      text.charCodeAt(i + 2) === codeDot\n    ) {\n      // repair: remove the ellipsis (three dots) and optionally a comma\n      i += 3\n      parseWhitespaceAndSkipComments()\n      skipCharacter(codeComma)\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an object like '{\"key\": \"value\"}'\n   */\n  function parseObject(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      output += '{'\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: skip leading comma like in {, message: \"hi\"}\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        let processedComma: boolean\n        if (!initial) {\n          processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n          parseWhitespaceAndSkipComments()\n        } else {\n          processedComma = true\n          initial = false\n        }\n\n        skipEllipsis()\n\n        const processedKey = parseString() || parseUnquotedString(true)\n        if (!processedKey) {\n          if (\n            text.charCodeAt(i) === codeClosingBrace ||\n            text.charCodeAt(i) === codeOpeningBrace ||\n            text.charCodeAt(i) === codeClosingBracket ||\n            text.charCodeAt(i) === codeOpeningBracket ||\n            text[i] === undefined\n          ) {\n            // repair trailing comma\n            output = stripLastOccurrence(output, ',')\n          } else {\n            throwObjectKeyExpected()\n          }\n          break\n        }\n\n        parseWhitespaceAndSkipComments()\n        const processedColon = parseCharacter(codeColon)\n        const truncatedText = i >= text.length\n        if (!processedColon) {\n          if (isStartOfValue(text[i]) || truncatedText) {\n            // repair missing colon\n            output = insertBeforeLastWhitespace(output, ':')\n          } else {\n            throwColonExpected()\n          }\n        }\n        const processedValue = parseValue()\n        if (!processedValue) {\n          if (processedColon || truncatedText) {\n            // repair missing object value\n            output += 'null'\n          } else {\n            throwColonExpected()\n          }\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBrace) {\n        output += '}'\n        i++\n      } else {\n        // repair missing end bracket\n        output = insertBeforeLastWhitespace(output, '}')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse an array like '[\"item1\", \"item2\", ...]'\n   */\n  function parseArray(): boolean {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      output += '['\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: skip leading comma like in [,1,2,3]\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          const processedComma = parseCharacter(codeComma)\n          if (!processedComma) {\n            // repair missing comma\n            output = insertBeforeLastWhitespace(output, ',')\n          }\n        } else {\n          initial = false\n        }\n\n        skipEllipsis()\n\n        const processedValue = parseValue()\n        if (!processedValue) {\n          // repair trailing comma\n          output = stripLastOccurrence(output, ',')\n          break\n        }\n      }\n\n      if (text.charCodeAt(i) === codeClosingBracket) {\n        output += ']'\n        i++\n      } else {\n        // repair missing closing array bracket\n        output = insertBeforeLastWhitespace(output, ']')\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse and repair Newline Delimited JSON (NDJSON):\n   * multiple JSON objects separated by a newline character\n   */\n  function parseNewlineDelimitedJSON() {\n    // repair NDJSON\n    let initial = true\n    let processedValue = true\n    while (processedValue) {\n      if (!initial) {\n        // parse optional comma, insert when missing\n        const processedComma = parseCharacter(codeComma)\n        if (!processedComma) {\n          // repair: add missing comma\n          output = insertBeforeLastWhitespace(output, ',')\n        }\n      } else {\n        initial = false\n      }\n\n      processedValue = parseValue()\n    }\n\n    if (!processedValue) {\n      // repair: remove trailing comma\n      output = stripLastOccurrence(output, ',')\n    }\n\n    // repair: wrap the output inside array brackets\n    output = `[\\n${output}\\n]`\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there, or stopping at a\n   *   stop index detected in the first iteration.\n   */\n  function parseString(stopAtDelimiter = false, stopAtIndex = -1): boolean {\n    let skipEscapeChars = text.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(text.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(text.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(text.charCodeAt(i))\n          ? isSingleQuote\n          : isSingleQuoteLike(text.charCodeAt(i))\n            ? isSingleQuoteLike\n            : isDoubleQuoteLike\n\n      const iBefore = i\n      const oBefore = output.length\n\n      let str = '\"'\n      i++\n\n      while (true) {\n        if (i >= text.length) {\n          // end of text, we are missing an end quote\n\n          const iPrev = prevNonWhitespaceIndex(i - 1)\n          if (!stopAtDelimiter && isDelimiter(text.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(true)\n          }\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          return true\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (i === stopAtIndex) {\n          // use the stop index detected in the first iteration, and repair end quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          return true\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (isEndQuote(text.charCodeAt(i))) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i\n          const oQuote = str.length\n          str += '\"'\n          i++\n          output += str\n\n          parseWhitespaceAndSkipComments(false)\n\n          if (\n            stopAtDelimiter ||\n            i >= text.length ||\n            isDelimiter(text.charAt(i)) ||\n            isQuote(text.charCodeAt(i)) ||\n            isDigit(text.charCodeAt(i))\n          ) {\n            // The quote is followed by the end of the text, a delimiter,\n            // or a next value. So the quote is indeed the end of the string.\n            parseConcatenatedString()\n\n            return true\n          }\n\n          const iPrevChar = prevNonWhitespaceIndex(iQuote - 1)\n          const prevChar = text.charAt(iPrevChar)\n\n          if (prevChar === ',') {\n            // A comma followed by a quote, like '{\"a\":\"b,c,\"d\":\"e\"}'.\n            // We assume that the quote is a start quote, and that the end quote\n            // should have been located right before the comma but is missing.\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(false, iPrevChar)\n          }\n\n          if (isDelimiter(prevChar)) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore\n            output = output.substring(0, oBefore)\n\n            return parseString(true)\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output = output.substring(0, oBefore)\n          i = iQuote + 1\n\n          // repair unescaped quote\n          str = `${str.substring(0, oQuote)}\\\\${str.substring(oQuote)}`\n        } else if (stopAtDelimiter && isUnquotedStringDelimiter(text[i])) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // test start of an url like \"https://...\" (this would be parsed as a comment)\n          if (\n            text.charCodeAt(i - 1) === codeColon &&\n            regexUrlStart.test(text.substring(iBefore + 1, i + 2))\n          ) {\n            while (i < text.length && regexUrlChar.test(text[i])) {\n              str += text[i]\n              i++\n            }\n          }\n\n          // repair missing quote\n          str = insertBeforeLastWhitespace(str, '\"')\n          output += str\n\n          parseConcatenatedString()\n\n          return true\n        } else if (text.charCodeAt(i) === codeBackslash) {\n          // handle escaped content like \\n or \\u2605\n          const char = text.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            str += text.slice(i, i + 2)\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(text.charCodeAt(i + j))) {\n              j++\n            }\n\n            if (j === 6) {\n              str += text.slice(i, i + 6)\n              i += 6\n            } else if (i + j >= text.length) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i = text.length\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            str += char\n            i += 2\n          }\n        } else {\n          // handle regular characters\n          const char = text.charAt(i)\n          const code = text.charCodeAt(i)\n\n          if (code === codeDoubleQuote && text.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            str += `\\\\${char}`\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            str += controlCharacters[char]\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            str += char\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let processed = false\n\n    parseWhitespaceAndSkipComments()\n    while (text.charCodeAt(i) === codePlus) {\n      processed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output = stripLastOccurrence(output, '\"', true)\n      const start = output.length\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output = removeAtIndex(output, start, 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output = insertBeforeLastWhitespace(output, '\"')\n      }\n    }\n\n    return processed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start\n        return false\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(text.charCodeAt(i))) {\n      i++\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return true\n      }\n      if (!isDigit(text.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start\n      return false\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = text.slice(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output += hasInvalidLeadingZero ? `\"${num}\"` : num\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (text.slice(i, i + name.length) === name) {\n      output += value\n      i += name.length\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Repair an unquoted string by adding quotes around it\n   * Repair a MongoDB function call like NumberLong(\"2\")\n   * Repair a JSONP function call like callback({...});\n   */\n  function parseUnquotedString(isKey: boolean) {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    const start = i\n\n    if (regexFunctionNameCharStart.test(text[i])) {\n      while (i < text.length && regexFunctionNameChar.test(text[i])) {\n        i++\n      }\n\n      let j = i\n      while (isWhitespace(text.charCodeAt(j))) {\n        j++\n      }\n\n      if (text[j] === '(') {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        i = j + 1\n\n        parseValue()\n\n        if (text.charCodeAt(i) === codeCloseParenthesis) {\n          // repair: skip close bracket of function call\n          i++\n          if (text.charCodeAt(i) === codeSemicolon) {\n            // repair: skip semicolon after JSONP call\n            i++\n          }\n        }\n\n        return true\n      }\n    }\n\n    while (\n      i < text.length &&\n      !isUnquotedStringDelimiter(text[i]) &&\n      !isQuote(text.charCodeAt(i)) &&\n      (!isKey || text.charCodeAt(i) !== codeColon)\n    ) {\n      i++\n    }\n\n    // test start of an url like \"https://...\" (this would be parsed as a comment)\n    if (text.charCodeAt(i - 1) === codeColon && regexUrlStart.test(text.substring(start, i + 2))) {\n      while (i < text.length && regexUrlChar.test(text[i])) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      // repair unquoted string\n      // also, repair undefined into null\n\n      // first, go back to prevent getting trailing whitespaces in the string\n      while (isWhitespace(text.charCodeAt(i - 1)) && i > 0) {\n        i--\n      }\n\n      const symbol = text.slice(start, i)\n      output += symbol === 'undefined' ? 'null' : JSON.stringify(symbol)\n\n      if (text.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return true\n    }\n  }\n\n  function parseRegex() {\n    if (text[i] === '/') {\n      const start = i\n      i++\n\n      while (i < text.length && (text[i] !== '/' || text[i - 1] === '\\\\')) {\n        i++\n      }\n      i++\n\n      output += `\"${text.substring(start, i)}\"`\n\n      return true\n    }\n  }\n\n  function prevNonWhitespaceIndex(start: number): number {\n    let prev = start\n\n    while (prev > 0 && isWhitespace(text.charCodeAt(prev))) {\n      prev--\n    }\n\n    return prev\n  }\n\n  function atEndOfNumber() {\n    return i >= text.length || isDelimiter(text[i]) || isWhitespace(text.charCodeAt(i))\n  }\n\n  function repairNumberEndingWithNumericSymbol(start: number) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output += `${text.slice(start, i)}0`\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError(`Invalid character ${JSON.stringify(char)}`, i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError(`Unexpected character ${JSON.stringify(text[i])}`, i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', text.length)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = text.slice(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n}\n\nfunction atEndOfBlockComment(text: string, i: number) {\n  return text[i] === '*' && text[i + 1] === '/'\n}\n"],"mappings":"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","ignoreList":[]}