{"version":3,"file":"core.js","names":["_JSONRepairError","require","_stringUtils","_InputBuffer","_OutputBuffer","_stack","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepairCore","_ref","onData","bufferSize","chunkSize","input","createInputBuffer","output","createOutputBuffer","write","i","iFlushed","stack","createStack","flushInputBuffer","flush","transform","chunk","push","currentLength","parse","close","parseWhitespaceAndSkipComments","type","StackType","object","caret","Caret","beforeKey","skipEllipsis","parseObjectKey","parseUnexpectedColon","parseRepairTrailingComma","parseRepairObjectEndOrComma","beforeValue","parseValue","parseRepairMissingObjectValue","afterValue","parseObjectComma","parseObjectEnd","array","parseRepairArrayEnd","parseArrayComma","parseArrayEnd","parseRepairMissingComma","ndJson","parseRepairNdJsonEnd","functionCall","parseFunctionCallEnd","root","parseUnexpectedEnd","parseRootEnd","parseObjectStart","parseArrayStart","parseString","parseNumber","parseKeywords","parseRepairUnquotedString","parseRepairRegex","parseCharacter","codeOpeningBrace","skipCharacter","codeComma","codeClosingBrace","update","codeOpeningBracket","codeClosingBracket","j","regexFunctionNameCharStart","test","charAt","isEnd","regexFunctionNameChar","k","isWhitespace","charCodeAt","codeOpenParenthesis","findNextDelimiter","codeColon","regexUrlStart","substring","regexUrlChar","symbol","JSON","stringify","codeDoubleQuote","start","concat","endsWithIgnoringWhitespace","stripLastOccurrence","throwObjectKeyExpected","throwUnexpectedEnd","throwUnexpectedCharacter","parsedKey","parseUnquotedKey","truncatedText","isStartOfValue","insertBeforeLastWhitespace","throwColonExpected","pop","codeCloseParenthesis","codeSemicolon","parsedComma","unshift","skipNewline","arguments","length","undefined","changed","parseWhitespace","parseComment","_isWhiteSpace","isWhitespaceExceptNewline","whitespace","c","isSpecialWhitespace","codeSlash","codeAsterisk","atEndOfBlockComment","codeNewline","code","skipEscapeCharacter","codeBackslash","codeDot","stopAtDelimiter","stopAtIndex","skipEscapeChars","isQuote","isEndQuote","isDoubleQuote","isSingleQuote","isSingleQuoteLike","isDoubleQuoteLike","iBefore","oBefore","iPrev","prevNonWhitespaceIndex","isDelimiter","remove","iQuote","oQuote","isDigit","parseConcatenatedString","iPrevChar","prevChar","insertAt","isUnquotedStringDelimiter","char","escapeChar","isHex","throwInvalidUnicodeCharacter","isControlCharacter","isValidStringCharacter","throwInvalidCharacter","parsed","codePlus","parsedStr","codeMinus","atEndOfNumber","repairNumberEndingWithNumericSymbol","codeLowercaseE","codeUppercaseE","num","hasInvalidLeadingZero","parseKeyword","name","value","end","isKey","prev","JSONRepairError","chars"],"sources":["../../../src/streaming/core.ts"],"sourcesContent":["import { JSONRepairError } from '../utils/JSONRepairError.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpenParenthesis,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isUnquotedStringDelimiter,\n  isValidStringCharacter,\n  isWhitespace,\n  isWhitespaceExceptNewline,\n  regexFunctionNameChar,\n  regexFunctionNameCharStart,\n  regexUrlChar,\n  regexUrlStart\n} from '../utils/stringUtils.js'\nimport { createInputBuffer } from './buffer/InputBuffer.js'\nimport { createOutputBuffer } from './buffer/OutputBuffer.js'\nimport { Caret, StackType, createStack } from './stack.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nexport interface JsonRepairCoreOptions {\n  onData: (chunk: string) => void\n  chunkSize?: number\n  bufferSize?: number\n}\n\nexport interface JsonRepairCore {\n  transform: (chunk: string) => void\n  flush: () => void\n}\n\nexport function jsonrepairCore({\n  onData,\n  bufferSize = 65536,\n  chunkSize = 65536\n}: JsonRepairCoreOptions): JsonRepairCore {\n  const input = createInputBuffer()\n\n  const output = createOutputBuffer({\n    write: onData,\n    bufferSize,\n    chunkSize\n  })\n\n  let i = 0\n  let iFlushed = 0\n  const stack = createStack()\n\n  function flushInputBuffer() {\n    while (iFlushed < i - bufferSize - chunkSize) {\n      iFlushed += chunkSize\n      input.flush(iFlushed)\n    }\n  }\n\n  function transform(chunk: string) {\n    input.push(chunk)\n\n    while (i < input.currentLength() - bufferSize && parse()) {\n      // loop until there is nothing more to process\n    }\n\n    flushInputBuffer()\n  }\n\n  function flush() {\n    input.close()\n\n    while (parse()) {\n      // loop until there is nothing more to process\n    }\n\n    output.flush()\n  }\n\n  function parse(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    switch (stack.type) {\n      case StackType.object: {\n        switch (stack.caret) {\n          case Caret.beforeKey:\n            return (\n              skipEllipsis() ||\n              parseObjectKey() ||\n              parseUnexpectedColon() ||\n              parseRepairTrailingComma() ||\n              parseRepairObjectEndOrComma()\n            )\n          case Caret.beforeValue:\n            return parseValue() || parseRepairMissingObjectValue()\n          case Caret.afterValue:\n            return parseObjectComma() || parseObjectEnd() || parseRepairObjectEndOrComma()\n          default:\n            return false\n        }\n      }\n\n      case StackType.array: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return (\n              skipEllipsis() || parseValue() || parseRepairTrailingComma() || parseRepairArrayEnd()\n            )\n          case Caret.afterValue:\n            return (\n              parseArrayComma() ||\n              parseArrayEnd() ||\n              parseRepairMissingComma() ||\n              parseRepairArrayEnd()\n            )\n          default:\n            return false\n        }\n      }\n\n      case StackType.ndJson: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseRepairTrailingComma()\n          case Caret.afterValue:\n            return parseArrayComma() || parseRepairMissingComma() || parseRepairNdJsonEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.functionCall: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue()\n          case Caret.afterValue:\n            return parseFunctionCallEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.root: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseUnexpectedEnd()\n          case Caret.afterValue:\n            return parseRootEnd()\n          default:\n            return false\n        }\n      }\n\n      default:\n        return false\n    }\n  }\n\n  function parseValue(): boolean {\n    return (\n      parseObjectStart() ||\n      parseArrayStart() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseRepairUnquotedString() ||\n      parseRepairRegex()\n    )\n  }\n\n  function parseObjectStart(): boolean {\n    if (parseCharacter(codeOpeningBrace)) {\n      parseWhitespaceAndSkipComments()\n\n      skipEllipsis()\n\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      if (parseCharacter(codeClosingBrace)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.object, Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseArrayStart(): boolean {\n    if (parseCharacter(codeOpeningBracket)) {\n      parseWhitespaceAndSkipComments()\n\n      skipEllipsis()\n\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      if (parseCharacter(codeClosingBracket)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.array, Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairUnquotedString(): boolean {\n    let j = i\n\n    if (regexFunctionNameCharStart.test(input.charAt(j))) {\n      while (!input.isEnd(j) && regexFunctionNameChar.test(input.charAt(j))) {\n        j++\n      }\n\n      let k = j\n      while (isWhitespace(input.charCodeAt(k))) {\n        k++\n      }\n\n      if (input.charCodeAt(k) === codeOpenParenthesis) {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        k++\n        i = k\n        return stack.push(StackType.functionCall, Caret.beforeValue)\n      }\n    }\n\n    j = findNextDelimiter(false, j)\n    if (j !== null) {\n      // test start of an url like \"https://...\" (this would be parsed as a comment)\n      if (input.charCodeAt(j - 1) === codeColon && regexUrlStart.test(input.substring(i, j + 2))) {\n        while (!input.isEnd(j) && regexUrlChar.test(input.charAt(j))) {\n          j++\n        }\n      }\n\n      const symbol = input.substring(i, j)\n      i = j\n\n      output.push(symbol === 'undefined' ? 'null' : JSON.stringify(symbol))\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseRepairRegex() {\n    if (input.charAt(i) === '/') {\n      const start = i\n      i++\n\n      while (!input.isEnd(i) && (input.charAt(i) !== '/' || input.charAt(i - 1) === '\\\\')) {\n        i++\n      }\n      i++\n\n      output.push(`\"${input.substring(start, i)}\"`)\n\n      return stack.update(Caret.afterValue)\n    }\n  }\n\n  function parseRepairMissingObjectValue(): boolean {\n    // repair missing object value\n    output.push('null')\n    return stack.update(Caret.afterValue)\n  }\n\n  function parseRepairTrailingComma(): boolean {\n    // repair trailing comma\n    if (output.endsWithIgnoringWhitespace(',')) {\n      output.stripLastOccurrence(',')\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnexpectedColon(): boolean {\n    if (input.charCodeAt(i) === codeColon) {\n      throwObjectKeyExpected()\n    }\n\n    return false\n  }\n\n  function parseUnexpectedEnd(): boolean {\n    if (input.isEnd(i)) {\n      throwUnexpectedEnd()\n    } else {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseObjectKey(): boolean {\n    const parsedKey = parseString() || parseUnquotedKey()\n    if (parsedKey) {\n      parseWhitespaceAndSkipComments()\n\n      if (parseCharacter(codeColon)) {\n        // expect a value after the :\n        return stack.update(Caret.beforeValue)\n      }\n\n      const truncatedText = input.isEnd(i)\n      if (isStartOfValue(input.charAt(i)) || truncatedText) {\n        // repair missing colon\n        output.insertBeforeLastWhitespace(':')\n        return stack.update(Caret.beforeValue)\n      }\n\n      throwColonExpected()\n    }\n\n    return false\n  }\n\n  function parseObjectComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseObjectEnd(): boolean {\n    if (parseCharacter(codeClosingBrace)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairObjectEndOrComma(): true {\n    // repair missing object end and trailing comma\n    if (input.charAt(i) === '{') {\n      output.stripLastOccurrence(',')\n      output.insertBeforeLastWhitespace('}')\n      return stack.pop()\n    }\n\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeKey)\n    }\n\n    // repair missing closing brace\n    output.insertBeforeLastWhitespace('}')\n    return stack.pop()\n  }\n\n  function parseArrayComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseArrayEnd(): boolean {\n    if (parseCharacter(codeClosingBracket)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairMissingComma(): boolean {\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairArrayEnd(): true {\n    // repair missing closing bracket\n    output.insertBeforeLastWhitespace(']')\n    return stack.pop()\n  }\n\n  function parseRepairNdJsonEnd(): boolean {\n    if (input.isEnd(i)) {\n      output.push('\\n]')\n      return stack.pop()\n    }\n\n    throwUnexpectedEnd()\n    return false // just to make TS happy\n  }\n\n  function parseFunctionCallEnd(): true {\n    if (skipCharacter(codeCloseParenthesis)) {\n      skipCharacter(codeSemicolon)\n    }\n\n    return stack.pop()\n  }\n\n  function parseRootEnd(): boolean {\n    const parsedComma = parseCharacter(codeComma)\n    parseWhitespaceAndSkipComments()\n\n    if (\n      isStartOfValue(input.charAt(i)) &&\n      (output.endsWithIgnoringWhitespace(',') || output.endsWithIgnoringWhitespace('\\n'))\n    ) {\n      // start of a new value after end of the root level object: looks like\n      // newline delimited JSON -> turn into a root level array\n      if (!parsedComma) {\n        // repair missing comma\n        output.insertBeforeLastWhitespace(',')\n      }\n\n      output.unshift('[\\n')\n\n      return stack.push(StackType.ndJson, Caret.beforeValue)\n    }\n\n    if (parsedComma) {\n      // repair: remove trailing comma\n      output.stripLastOccurrence(',')\n\n      return stack.update(Caret.afterValue)\n    }\n\n    // repair redundant end braces and brackets\n    while (input.charCodeAt(i) === codeClosingBrace || input.charCodeAt(i) === codeClosingBracket) {\n      i++\n      parseWhitespaceAndSkipComments()\n    }\n\n    if (!input.isEnd(i)) {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseWhitespaceAndSkipComments(skipNewline = true): boolean {\n    const start = i\n\n    let changed = parseWhitespace(skipNewline)\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace(skipNewline)\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(skipNewline: boolean): boolean {\n    const _isWhiteSpace = skipNewline ? isWhitespace : isWhitespaceExceptNewline\n    let whitespace = ''\n\n    while (true) {\n      const c = input.charCodeAt(i)\n      if (_isWhiteSpace(c)) {\n        whitespace += input.charAt(i)\n        i++\n      } else if (isSpecialWhitespace(c)) {\n        // repair special whitespace\n        whitespace += ' '\n        i++\n      } else {\n        break\n      }\n    }\n\n    if (whitespace.length > 0) {\n      output.push(whitespace)\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (!input.isEnd(i) && !atEndOfBlockComment(i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (!input.isEnd(i) && input.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      output.push(input.charAt(i))\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Skip ellipsis like \"[1,2,3,...]\" or \"[1,2,3,...,9]\" or \"[...,7,8,9]\"\n   * or a similar construct in objects.\n   */\n  function skipEllipsis(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    if (\n      input.charCodeAt(i) === codeDot &&\n      input.charCodeAt(i + 1) === codeDot &&\n      input.charCodeAt(i + 2) === codeDot\n    ) {\n      // repair: remove the ellipsis (three dots) and optionally a comma\n      i += 3\n      parseWhitespaceAndSkipComments()\n      skipCharacter(codeComma)\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there, or stopping at a\n   *   stop index detected in the first iteration.\n   */\n  function parseString(stopAtDelimiter = false, stopAtIndex = -1): boolean {\n    let skipEscapeChars = input.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(input.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(input.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(input.charCodeAt(i))\n          ? isSingleQuote\n          : isSingleQuoteLike(input.charCodeAt(i))\n            ? isSingleQuoteLike\n            : isDoubleQuoteLike\n\n      const iBefore = i\n      const oBefore = output.length()\n\n      output.push('\"')\n      i++\n\n      while (true) {\n        if (input.isEnd(i)) {\n          // end of text, we have a missing quote somewhere\n\n          const iPrev = prevNonWhitespaceIndex(i - 1)\n          if (!stopAtDelimiter && isDelimiter(input.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(true)\n          }\n\n          // repair missing quote\n          output.insertBeforeLastWhitespace('\"')\n\n          return stack.update(Caret.afterValue)\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (i === stopAtIndex) {\n          // use the stop index detected in the first iteration, and repair end quote\n          output.insertBeforeLastWhitespace('\"')\n\n          return stack.update(Caret.afterValue)\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (isEndQuote(input.charCodeAt(i))) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i\n          const oQuote = output.length()\n          output.push('\"')\n          i++\n\n          parseWhitespaceAndSkipComments(false)\n\n          if (\n            stopAtDelimiter ||\n            input.isEnd(i) ||\n            isDelimiter(input.charAt(i)) ||\n            isQuote(input.charCodeAt(i)) ||\n            isDigit(input.charCodeAt(i))\n          ) {\n            // The quote is followed by the end of the text, a delimiter, or a next value\n            // so the quote is indeed the end of the string\n            parseConcatenatedString()\n\n            return stack.update(Caret.afterValue)\n          }\n\n          const iPrevChar = prevNonWhitespaceIndex(iQuote - 1)\n          const prevChar = input.charAt(iPrevChar)\n\n          if (prevChar === ',') {\n            // A comma followed by a quote, like '{\"a\":\"b,c,\"d\":\"e\"}'.\n            // We assume that the quote is a start quote, and that the end quote\n            // should have been located right before the comma but is missing.\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(false, iPrevChar)\n          }\n\n          if (isDelimiter(prevChar)) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(true)\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output.remove(oQuote + 1)\n          i = iQuote + 1\n\n          // repair unescaped quote\n          output.insertAt(oQuote, '\\\\')\n        } else if (stopAtDelimiter && isUnquotedStringDelimiter(input.charAt(i))) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // test start of an url like \"https://...\" (this would be parsed as a comment)\n          if (\n            input.charCodeAt(i - 1) === codeColon &&\n            regexUrlStart.test(input.substring(iBefore + 1, i + 2))\n          ) {\n            while (!input.isEnd(i) && regexUrlChar.test(input.charAt(i))) {\n              output.push(input.charAt(i))\n              i++\n            }\n          }\n\n          // repair missing quote\n          output.insertBeforeLastWhitespace('\"')\n\n          parseConcatenatedString()\n\n          return stack.update(Caret.afterValue)\n        } else if (input.charCodeAt(i) === codeBackslash) {\n          // handle escaped content like \\n or \\u2605\n          const char = input.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            output.push(input.substring(i, i + 2))\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(input.charCodeAt(i + j))) {\n              j++\n            }\n\n            if (j === 6) {\n              output.push(input.substring(i, i + 6))\n              i += 6\n            } else if (input.isEnd(i + j)) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i += j\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            output.push(char)\n            i += 2\n          }\n        } else {\n          // handle regular characters\n          const char = input.charAt(i)\n          const code = char.charCodeAt(0)\n\n          if (code === codeDoubleQuote && input.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            output.push(`\\\\${char}`)\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            output.push(controlCharacters[char])\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            output.push(char)\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let parsed = false\n\n    parseWhitespaceAndSkipComments()\n    while (input.charCodeAt(i) === codePlus) {\n      parsed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output.stripLastOccurrence('\"', true)\n      const start = output.length()\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output.remove(start, start + 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output.insertBeforeLastWhitespace('\"')\n      }\n    }\n\n    return parsed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (input.charCodeAt(i) === codeMinus) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(input.charCodeAt(i))) {\n      i++\n    }\n\n    if (input.charCodeAt(i) === codeDot) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (input.charCodeAt(i) === codeLowercaseE || input.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (input.charCodeAt(i) === codeMinus || input.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start\n      return false\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = input.substring(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output.push(hasInvalidLeadingZero ? `\"${num}\"` : num)\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (input.substring(i, i + name.length) === name) {\n      output.push(value)\n      i += name.length\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnquotedKey(): boolean {\n    let end = findNextDelimiter(true, i)\n\n    if (end !== null) {\n      // first, go back to prevent getting trailing whitespaces in the string\n      while (isWhitespace(input.charCodeAt(end - 1)) && end > i) {\n        end--\n      }\n\n      const symbol = input.substring(i, end)\n      output.push(JSON.stringify(symbol))\n      i = end\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue) // we do not have a state Caret.afterKey, therefore we use afterValue here\n    }\n\n    return false\n  }\n\n  function findNextDelimiter(isKey: boolean, start: number): number | null {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    let j = start\n    while (\n      !input.isEnd(j) &&\n      !isUnquotedStringDelimiter(input.charAt(j)) &&\n      !isQuote(input.charCodeAt(j)) &&\n      (!isKey || input.charCodeAt(j) !== codeColon)\n    ) {\n      j++\n    }\n\n    return j > i ? j : null\n  }\n\n  function prevNonWhitespaceIndex(start: number): number {\n    let prev = start\n\n    while (prev > 0 && isWhitespace(input.charCodeAt(prev))) {\n      prev--\n    }\n\n    return prev\n  }\n\n  function atEndOfNumber() {\n    return input.isEnd(i) || isDelimiter(input.charAt(i)) || isWhitespace(input.charCodeAt(i))\n  }\n\n  function repairNumberEndingWithNumericSymbol(start: number) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output.push(`${input.substring(start, i)}0`)\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError(`Invalid character ${JSON.stringify(char)}`, i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError(`Unexpected character ${JSON.stringify(input.charAt(i))}`, i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', i)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = input.substring(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n\n  function atEndOfBlockComment(i: number) {\n    return input.charAt(i) === '*' && input.charAt(i + 1) === '/'\n  }\n\n  return {\n    transform,\n    flush\n  }\n}\n"],"mappings":"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","ignoreList":[]}